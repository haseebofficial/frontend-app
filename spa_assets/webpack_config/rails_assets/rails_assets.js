import path from "path";
import { imageImportMatcher, replaceImageImportWithAssetUrl } from "webpack_config/rails_assets/images_loader";
import MiniCssExtractPlugin from "mini-css-extract-plugin";
import CopyPlugin from 'copy-webpack-plugin';
import { availableLocales } from "i18n/locales";

let spaEntries = {};
availableLocales.forEach(locale => {
  let entry = `./webpack_entries/spa/autogenerated/entry.${locale}.js`;

  spaEntries[`javascripts/spa_assets/app.${locale}`] = ["core-js/stable", "regenerator-runtime/runtime", "whatwg-fetch", entry];
});

export default {
  stats: {
    children: false
  },

  resolve: { extensions: [".jsx", ".js"] },

  entry: {
    ...spaEntries,

    [`javascripts/embedded_react_assets/app.en`]: [
      "core-js/stable", "regenerator-runtime/runtime", "whatwg-fetch", `./webpack_entries/embedded_react_assets/js/entry.en.js`
    ],
    [`javascripts/embedded_react_assets/app.ru`]: [
      "core-js/stable", "regenerator-runtime/runtime", "whatwg-fetch", `./webpack_entries/embedded_react_assets/js/entry.ru.js`
    ],
    [`stylesheets/embedded_react_assets/app`]: [`./webpack_entries/embedded_react_assets/styles/all.js`]
  },
  output: {
    filename: "[name].js.erb",
    path: path.resolve(__dirname, "../../../app/assets"),
  },

  module: {
    rules: [
      {
        test: /\.(js|jsx)$/,
        exclude: /@babel(?:\/|\\{1,2})runtime|core-js/,
        use: [ 
          "babel-loader",
          'webpack-import-glob-loader',
          {
            loader: 'string-replace-loader',
            options: {
              search: imageImportMatcher,
              replace: replaceImageImportWithAssetUrl,
              flags: 'g'
            }
          }
        ]
      },
      {
        test: /\.s[ac]ss$/i,
        use: [
          {
            loader: MiniCssExtractPlugin.loader,
            options: {
              hmr: process.env.NODE_ENV === 'development',
            },
          },
          {
            loader: 'string-replace-loader',
            options: {
              multiple: [
                { search: 'url\\(\\\\"~vendor\\/fonts', replace: 'asset_url(\\"spa_assets', flags: "g" },
                { search: 'url\\(\\\\"~vendor\\/images', replace: 'asset_url(\\"spa_assets', flags: "g" },
              ]
            }
          },
          {
            loader: "css-loader",
            options: {
              url: false
            }
          },
          {
            loader: 'sass-loader',
            options: {
              implementation: require('sass'),
              sassOptions: {
                includePaths: ['lib', 'node_modules']
              },
            },
          }
        ],
      },
    ]
  },

  plugins: [
    new MiniCssExtractPlugin({
      filename: '[name].scss',
      ignoreOrder: true,
    }),
    new CopyPlugin([
      { from: './vendor/fonts/', to: path.join("../../app/assets", "fonts/spa_assets") },
      { from: './vendor/images/', to: path.join("../../app/assets", "images/spa_assets") },
    ]),
  ]
};